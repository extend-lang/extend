/* extend - expansible programming language
 * Copyright (C) 2022 Vladimir Liutov vs@lutov.net
 * Copyright 2018 Ulf Adams
 * Source: https://github.com/ulfjack/ryu
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

#include "dtoa.h"

#include <assert.h>
#include <limits.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

namespace extend::log {

namespace {
static constexpr int FLOAT_POW5_INV_BITCOUNT = 59;
static constexpr int FLOAT_POW5_BITCOUNT = 61;
static constexpr int FLOAT_MANTISSA_BITS = 23;
static constexpr int FLOAT_EXPONENT_BITS = 8;
static constexpr int FLOAT_BIAS = 127;

// Returns the number of decimal digits in v, which must not contain more than 9
// digits.
static inline uint32_t
decimalLength9(const uint32_t v)
{
  // Function precondition: v is not a 10-digit number.
  // (f2s: 9 digits are sufficient for round-tripping.)
  // (d2fixed: We print 9-digit blocks.)
  assert(v < 1000000000);
  if (v >= 100000000) {
    return 9;
  }
  if (v >= 10000000) {
    return 8;
  }
  if (v >= 1000000) {
    return 7;
  }
  if (v >= 100000) {
    return 6;
  }
  if (v >= 10000) {
    return 5;
  }
  if (v >= 1000) {
    return 4;
  }
  if (v >= 100) {
    return 3;
  }
  if (v >= 10) {
    return 2;
  }
  return 1;
}

// Returns e == 0 ? 1 : ceil(log_2(5^e)); requires 0 <= e <= 3528.
static inline int32_t
pow5bits(const int32_t e)
{
  // This approximation works up to the point that the multiplication overflows
  // at e = 3529. If the multiplication were done in 64 bits, it would fail at
  // 5^4004 which is just greater than 2^9297.
  assert(e >= 0);
  assert(e <= 3528);
  return (int32_t)(((((uint32_t)e) * 1217359) >> 19) + 1);
}

// Returns floor(log_10(2^e)); requires 0 <= e <= 1650.
static inline uint32_t
log10Pow2(const int32_t e)
{
  // The first value this approximation fails for is 2^1651 which is just
  // greater than 10^297.
  assert(e >= 0);
  assert(e <= 1650);
  return (((uint32_t)e) * 78913) >> 18;
}

// Returns floor(log_10(5^e)); requires 0 <= e <= 2620.
static inline uint32_t
log10Pow5(const int32_t e)
{
  // The first value this approximation fails for is 5^2621 which is just
  // greater than 10^1832.
  assert(e >= 0);
  assert(e <= 2620);
  return (((uint32_t)e) * 732923) >> 20;
}

static inline int
copy_special_str(char8_t* const buffer,
                 const bool sign,
                 const bool exponent,
                 const bool mantissa)
{
  if (mantissa) {
    memcpy(buffer, "nan", 3);
    return 3;
  }
  if (sign) {
    buffer[0] = u8'-';
  }
  if (exponent) {
    memcpy(buffer + sign, "Infinity", 8);
    return sign + 8;
  }
  memcpy(buffer + sign, "0.0", 3);
  return sign + 3;
}

static inline uint32_t
float_to_bits(const float x)
{
  uint32_t bits = 0;
  memcpy(&bits, &x, sizeof(float));
  return bits;
}

// This table is generated by PrintFloatLookupTable.

static uint64_t FLOAT_POW5_INV_SPLIT[55] = {
  576460752303423489u, 461168601842738791u, 368934881474191033u,
  295147905179352826u, 472236648286964522u, 377789318629571618u,
  302231454903657294u, 483570327845851670u, 386856262276681336u,
  309485009821345069u, 495176015714152110u, 396140812571321688u,
  316912650057057351u, 507060240091291761u, 405648192073033409u,
  324518553658426727u, 519229685853482763u, 415383748682786211u,
  332306998946228969u, 531691198313966350u, 425352958651173080u,
  340282366920938464u, 544451787073501542u, 435561429658801234u,
  348449143727040987u, 557518629963265579u, 446014903970612463u,
  356811923176489971u, 570899077082383953u, 456719261665907162u,
  365375409332725730u, 292300327466180584u, 467680523945888934u,
  374144419156711148u, 299315535325368918u, 478904856520590269u,
  383123885216472215u, 306499108173177772u, 490398573077084435u,
  392318858461667548u, 313855086769334039u, 502168138830934462u,
  401734511064747569u, 321387608851798056u, 514220174162876889u,
  411376139330301511u, 329100911464241209u, 526561458342785934u,
  421249166674228747u, 336999333339382998u, 539198933343012796u,
  431359146674410237u, 345087317339528190u, 552139707743245103u,
  441711766194596083u
};
static const uint64_t FLOAT_POW5_SPLIT[47] = {
  1152921504606846976u, 1441151880758558720u, 1801439850948198400u,
  2251799813685248000u, 1407374883553280000u, 1759218604441600000u,
  2199023255552000000u, 1374389534720000000u, 1717986918400000000u,
  2147483648000000000u, 1342177280000000000u, 1677721600000000000u,
  2097152000000000000u, 1310720000000000000u, 1638400000000000000u,
  2048000000000000000u, 1280000000000000000u, 1600000000000000000u,
  2000000000000000000u, 1250000000000000000u, 1562500000000000000u,
  1953125000000000000u, 1220703125000000000u, 1525878906250000000u,
  1907348632812500000u, 1192092895507812500u, 1490116119384765625u,
  1862645149230957031u, 1164153218269348144u, 1455191522836685180u,
  1818989403545856475u, 2273736754432320594u, 1421085471520200371u,
  1776356839400250464u, 2220446049250313080u, 1387778780781445675u,
  1734723475976807094u, 2168404344971008868u, 1355252715606880542u,
  1694065894508600678u, 2117582368135750847u, 1323488980084844279u,
  1654361225106055349u, 2067951531382569187u, 1292469707114105741u,
  1615587133892632177u, 2019483917365790221u
};

static inline uint32_t
pow5factor_32(uint32_t value)
{
  uint32_t count = 0;
  for (;;) {
    assert(value != 0);
    const uint32_t q = value / 5;
    const uint32_t r = value % 5;
    if (r != 0) {
      break;
    }
    value = q;
    ++count;
  }
  return count;
}

// Returns true if value is divisible by 5^p.
static inline bool
multipleOfPowerOf5_32(const uint32_t value, const uint32_t p)
{
  return pow5factor_32(value) >= p;
}

// Returns true if value is divisible by 2^p.
static inline bool
multipleOfPowerOf2_32(const uint32_t value, const uint32_t p)
{
  // __builtin_ctz doesn't appear to be faster here.
  return (value & ((1u << p) - 1)) == 0;
}

// It seems to be slightly faster to avoid uint128_t here, although the
// generated code for uint128_t looks slightly nicer.
static inline uint32_t
mulShift32(const uint32_t m, const uint64_t factor, const int32_t shift)
{
  assert(shift > 32);

  // The casts here help MSVC to avoid calls to the __allmul library
  // function.
  const uint32_t factorLo = (uint32_t)(factor);
  const uint32_t factorHi = (uint32_t)(factor >> 32);
  const uint64_t bits0 = (uint64_t)m * factorLo;
  const uint64_t bits1 = (uint64_t)m * factorHi;

#if defined(__LP32__)
  // On 32-bit platforms we can avoid a 64-bit shift-right since we only
  // need the upper 32 bits of the buffer and the shift value is > 32.
  const uint32_t bits0Hi = (uint32_t)(bits0 >> 32);
  uint32_t bits1Lo = (uint32_t)(bits1);
  uint32_t bits1Hi = (uint32_t)(bits1 >> 32);
  bits1Lo += bits0Hi;
  bits1Hi += (bits1Lo < bits0Hi);
  if (shift >= 64) {
    // s2f can call this with a shift value >= 64, which we have to handle.
    // This could now be slower than the !defined(__LP32__) case.
    return (uint32_t)(bits1Hi >> (shift - 64));
  } else {
    const int32_t s = shift - 32;
    return (bits1Hi << (32 - s)) | (bits1Lo >> s);
  }
#else  // __LP32__
  const uint64_t sum = (bits0 >> 32) + bits1;
  const uint64_t shiftedSum = sum >> (shift - 32);
  assert(shiftedSum <= UINT32_MAX);
  return (uint32_t)shiftedSum;
#endif // __LP32__
}

static inline uint32_t
mulPow5InvDivPow2(const uint32_t m, const uint32_t q, const int32_t j)
{
  return mulShift32(m, FLOAT_POW5_INV_SPLIT[q], j);
}

static inline uint32_t
mulPow5divPow2(const uint32_t m, const uint32_t i, const int32_t j)
{
  return mulShift32(m, FLOAT_POW5_SPLIT[i], j);
}

// A table of all two-digit numbers. This is used to speed up decimal digit
// generation by copying pairs of digits into the final output.
static const char8_t DIGIT_TABLE[200] = {
  u8'0', u8'0', u8'0', u8'1', u8'0', u8'2', u8'0', u8'3', u8'0', u8'4', u8'0',
  u8'5', u8'0', u8'6', u8'0', u8'7', u8'0', u8'8', u8'0', u8'9', u8'1', u8'0',
  u8'1', u8'1', u8'1', u8'2', u8'1', u8'3', u8'1', u8'4', u8'1', u8'5', u8'1',
  u8'6', u8'1', u8'7', u8'1', u8'8', u8'1', u8'9', u8'2', u8'0', u8'2', u8'1',
  u8'2', u8'2', u8'2', u8'3', u8'2', u8'4', u8'2', u8'5', u8'2', u8'6', u8'2',
  u8'7', u8'2', u8'8', u8'2', u8'9', u8'3', u8'0', u8'3', u8'1', u8'3', u8'2',
  u8'3', u8'3', u8'3', u8'4', u8'3', u8'5', u8'3', u8'6', u8'3', u8'7', u8'3',
  u8'8', u8'3', u8'9', u8'4', u8'0', u8'4', u8'1', u8'4', u8'2', u8'4', u8'3',
  u8'4', u8'4', u8'4', u8'5', u8'4', u8'6', u8'4', u8'7', u8'4', u8'8', u8'4',
  u8'9', u8'5', u8'0', u8'5', u8'1', u8'5', u8'2', u8'5', u8'3', u8'5', u8'4',
  u8'5', u8'5', u8'5', u8'6', u8'5', u8'7', u8'5', u8'8', u8'5', u8'9', u8'6',
  u8'0', u8'6', u8'1', u8'6', u8'2', u8'6', u8'3', u8'6', u8'4', u8'6', u8'5',
  u8'6', u8'6', u8'6', u8'7', u8'6', u8'8', u8'6', u8'9', u8'7', u8'0', u8'7',
  u8'1', u8'7', u8'2', u8'7', u8'3', u8'7', u8'4', u8'7', u8'5', u8'7', u8'6',
  u8'7', u8'7', u8'7', u8'8', u8'7', u8'9', u8'8', u8'0', u8'8', u8'1', u8'8',
  u8'2', u8'8', u8'3', u8'8', u8'4', u8'8', u8'5', u8'8', u8'6', u8'8', u8'7',
  u8'8', u8'8', u8'8', u8'9', u8'9', u8'0', u8'9', u8'1', u8'9', u8'2', u8'9',
  u8'3', u8'9', u8'4', u8'9', u8'5', u8'9', u8'6', u8'9', u8'7', u8'9', u8'8',
  u8'9', u8'9'
};

// A floating decimal representing m * 10^e.
struct floating_decimal_32
{
  uint32_t mantissa;
  // Decimal exponent's range is -45 to 38
  // inclusive, and can fit in a short if needed.
  int32_t exponent;
};

static inline floating_decimal_32
f2d(const uint32_t ieeeMantissa, const uint32_t ieeeExponent)
{
  int32_t e2;
  uint32_t m2;
  if (ieeeExponent == 0) {
    // We subtract 2 so that the bounds computation has 2 additional bits.
    e2 = 1 - FLOAT_BIAS - FLOAT_MANTISSA_BITS - 2;
    m2 = ieeeMantissa;
  } else {
    e2 = (int32_t)ieeeExponent - FLOAT_BIAS - FLOAT_MANTISSA_BITS - 2;
    m2 = (1u << FLOAT_MANTISSA_BITS) | ieeeMantissa;
  }
  const bool even = (m2 & 1) == 0;
  const bool acceptBounds = even;

  // Step 2: Determine the interval of valid decimal representations.
  const uint32_t mv = 4 * m2;
  const uint32_t mp = 4 * m2 + 2;
  // Implicit bool -> int conversion. True is 1, false is 0.
  const uint32_t mmShift = ieeeMantissa != 0 || ieeeExponent <= 1;
  const uint32_t mm = 4 * m2 - 1 - mmShift;

  // Step 3: Convert to a decimal power base using 64-bit arithmetic.
  uint32_t vr, vp, vm;
  int32_t e10;
  bool vmIsTrailingZeros = false;
  bool vrIsTrailingZeros = false;
  uint8_t lastRemovedDigit = 0;
  if (e2 >= 0) {
    const uint32_t q = log10Pow2(e2);
    e10 = (int32_t)q;
    const int32_t k = FLOAT_POW5_INV_BITCOUNT + pow5bits((int32_t)q) - 1;
    const int32_t i = -e2 + (int32_t)q + k;
    vr = mulPow5InvDivPow2(mv, q, i);
    vp = mulPow5InvDivPow2(mp, q, i);
    vm = mulPow5InvDivPow2(mm, q, i);
    if (q != 0 && (vp - 1) / 10 <= vm / 10) {
      // We need to know one removed digit even if we are not going to loop
      // below. We could use q = X - 1 above, except that would require 33 bits
      // for the buffer, and we've found that 32-bit arithmetic is faster even
      // on 64-bit machines.
      const int32_t l =
        FLOAT_POW5_INV_BITCOUNT + pow5bits((int32_t)(q - 1)) - 1;
      lastRemovedDigit =
        (uint8_t)(mulPow5InvDivPow2(mv, q - 1, -e2 + (int32_t)q - 1 + l) % 10);
    }
    if (q <= 9) {
      // The largest power of 5 that fits in 24 bits is 5^10, but q <= 9 seems
      // to be safe as well. Only one of mp, mv, and mm can be a multiple of 5,
      // if any.
      if (mv % 5 == 0) {
        vrIsTrailingZeros = multipleOfPowerOf5_32(mv, q);
      } else if (acceptBounds) {
        vmIsTrailingZeros = multipleOfPowerOf5_32(mm, q);
      } else {
        vp -= multipleOfPowerOf5_32(mp, q);
      }
    }
  } else {
    const uint32_t q = log10Pow5(-e2);
    e10 = (int32_t)q + e2;
    const int32_t i = -e2 - (int32_t)q;
    const int32_t k = pow5bits(i) - FLOAT_POW5_BITCOUNT;
    int32_t j = (int32_t)q - k;
    vr = mulPow5divPow2(mv, (uint32_t)i, j);
    vp = mulPow5divPow2(mp, (uint32_t)i, j);
    vm = mulPow5divPow2(mm, (uint32_t)i, j);
    if (q != 0 && (vp - 1) / 10 <= vm / 10) {
      j = (int32_t)q - 1 - (pow5bits(i + 1) - FLOAT_POW5_BITCOUNT);
      lastRemovedDigit =
        (uint8_t)(mulPow5divPow2(mv, (uint32_t)(i + 1), j) % 10);
    }
    if (q <= 1) {
      // {vr,vp,vm} is trailing zeros if {mv,mp,mm} has at least q trailing 0
      // bits. mv = 4 * m2, so it always has at least two trailing 0 bits.
      vrIsTrailingZeros = true;
      if (acceptBounds) {
        // mm = mv - 1 - mmShift, so it has 1 trailing 0 bit iff mmShift == 1.
        vmIsTrailingZeros = mmShift == 1;
      } else {
        // mp = mv + 2, so it always has at least one trailing 0 bit.
        --vp;
      }
    } else if (q < 31) { // TODO(ulfjack): Use a tighter bound here.
      vrIsTrailingZeros = multipleOfPowerOf2_32(mv, q - 1);
    }
  }

  // Step 4: Find the shortest decimal representation in the interval of valid
  // representations.
  int32_t removed = 0;
  uint32_t output;
  if (vmIsTrailingZeros || vrIsTrailingZeros) {
    // General case, which happens rarely (~4.0%).
    while (vp / 10 > vm / 10) {
      // The compiler does not realize that vm % 10 can be computed from vm / 10
      // as vm - (vm / 10) * 10.
      vmIsTrailingZeros &= vm - (vm / 10) * 10 == 0;
      vrIsTrailingZeros &= lastRemovedDigit == 0;
      lastRemovedDigit = (uint8_t)(vr % 10);
      vr /= 10;
      vp /= 10;
      vm /= 10;
      ++removed;
    }
    if (vmIsTrailingZeros) {
      while (vm % 10 == 0) {
        vrIsTrailingZeros &= lastRemovedDigit == 0;
        lastRemovedDigit = (uint8_t)(vr % 10);
        vr /= 10;
        vp /= 10;
        vm /= 10;
        ++removed;
      }
    }
    if (vrIsTrailingZeros && lastRemovedDigit == 5 && vr % 2 == 0) {
      // Round even if the exact number is .....50..0.
      lastRemovedDigit = 4;
    }
    // We need to take vr + 1 if vr is outside bounds or we need to round up.
    output = vr + ((vr == vm && (!acceptBounds || !vmIsTrailingZeros)) ||
                   lastRemovedDigit >= 5);
  } else {
    // Specialized for the common case (~96.0%). Percentages below are relative
    // to this. Loop iterations below (approximately): 0: 13.6%, 1: 70.7%,
    // 2: 14.1%, 3: 1.39%, 4: 0.14%, 5+: 0.01%
    while (vp / 10 > vm / 10) {
      lastRemovedDigit = (uint8_t)(vr % 10);
      vr /= 10;
      vp /= 10;
      vm /= 10;
      ++removed;
    }
    // We need to take vr + 1 if vr is outside bounds or we need to round up.
    output = vr + (vr == vm || lastRemovedDigit >= 5);
  }
  const int32_t exp = e10 + removed;

  floating_decimal_32 fd;
  fd.exponent = exp;
  fd.mantissa = output;
  return fd;
}

static inline int
to_chars(uint32_t mantissa, int32_t exponent, const bool sign, char8_t* buffer)
{
  // Step 5: Print the decimal representation.
  if (sign) {
    *buffer++ = u8'-';
  }

  uint32_t length = decimalLength9(mantissa);

  // Print the decimal digits.
  uint32_t i = 0;
  while (mantissa >= 10000) {
    const uint32_t c = mantissa - 10000 * (mantissa / 10000);
    mantissa /= 10000;
    const uint32_t c0 = (c % 100) << 1;
    const uint32_t c1 = (c / 100) << 1;
    memcpy(buffer + length - i - 2, DIGIT_TABLE + c0, 2);
    memcpy(buffer + length - i - 4, DIGIT_TABLE + c1, 2);
    i += 4;
  }
  if (mantissa >= 100) {
    const uint32_t c = (mantissa % 100) << 1;
    mantissa /= 100;
    memcpy(buffer + length - i - 2, DIGIT_TABLE + c, 2);
    i += 2;
  }
  if (mantissa >= 10) {
    const uint32_t c = mantissa << 1;
    memcpy(buffer + length - i - 2, DIGIT_TABLE + c, 2);
  } else {
    *buffer = u8'0' + mantissa;
  }

  return sign + dtoa_prettify(buffer, length, exponent);
}

}

int
ftoa(float x, char8_t* buffer)
{
  // Step 1: Decode the floating-point number, and unify normalized and
  // subnormal cases.
  const uint32_t bits = float_to_bits(x);

  // Decode bits into sign, mantissa, and exponent.
  const bool ieeeSign =
    ((bits >> (FLOAT_MANTISSA_BITS + FLOAT_EXPONENT_BITS)) & 1) != 0;
  const uint32_t ieeeMantissa = bits & ((1u << FLOAT_MANTISSA_BITS) - 1);
  const uint32_t ieeeExponent =
    (bits >> FLOAT_MANTISSA_BITS) & ((1u << FLOAT_EXPONENT_BITS) - 1);

  // Case distinction; exit early for the easy cases.
  if (ieeeExponent == ((1u << FLOAT_EXPONENT_BITS) - 1u) ||
      (ieeeExponent == 0 && ieeeMantissa == 0)) {
    return copy_special_str(buffer, ieeeSign, ieeeExponent, ieeeMantissa);
  }

  const floating_decimal_32 v = f2d(ieeeMantissa, ieeeExponent);
  return to_chars(v.mantissa, v.exponent, ieeeSign, buffer);
}

} // namespace extend::log
